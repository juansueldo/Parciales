#include "Contribuyente.h"

int eContribuyente_inicializar (eContribuyente arrayContribuyentes[],int tam)
{
	int i;
	int rtn = -1;
	if(arrayContribuyentes != NULL && tam >0)
	{

		for (i = 0; i < tam; ++i)
		{
			strcpy(arrayContribuyentes[i].nombre," ");
			strcpy(arrayContribuyentes[i].apellido," ");
			strcpy(arrayContribuyentes[i].cuil," ");
			arrayContribuyentes[i].idContribuyente = 0;
			arrayContribuyentes[i].isEmpty=1;
		}
		rtn = 0;
	}
	return rtn;
}
int eContribuyente_buscarLibre (eContribuyente arrayContribuyentes[],int tam)
{
	int rtn;
	int i;
	rtn = -1;
	if(arrayContribuyentes != NULL && tam > 0)
	{
		for (i = 0; i < tam; ++i)
		{
			if(arrayContribuyentes[i].isEmpty==1)
			{
				rtn = i;
				break;
			}
		}
	}
	return rtn;
}
int eContribuyente_buscarId (eContribuyente arrayContribuyentes[],int tam,int id)
{
	int rtn = -1;
	int i;

	if (arrayContribuyentes != NULL && tam > 0) {
		for (i = 0; i < tam; i++) {
			if (arrayContribuyentes[i].idContribuyente == id && arrayContribuyentes[i].isEmpty == 0) {
				rtn = i;
				break;
			}
		}
	}

	return rtn;
}
eContribuyente eContribuyente_cargarPantalla (void)
{
	eContribuyente auxContribuyente;

		if((utn_getString(auxContribuyente.nombre,30,"\nINGRESE EL NOMBRE DEL CONTRIUBUYENTE: ","\nERROR. INGRESE EL NOMBRE DEL CONTRIUBUYENTE: ",1,3)) != 0)
		{
			printf("\nERROR. NO SE INGRESO EL NOMBRE DEL CONTRIBUYENTE");
		}
		if((utn_getString(auxContribuyente.apellido,30,"\nINGRESE EL APELLIDO DEL CONTRIUBUYENTE: ","\nERROR. INGRESE EL APELLIDO DEL CONTRIUBUYENTE: ",1,3)) != 0)
		{
			printf("\nERROR. NO SE INGRESO EL APELLIDO DEL CONTRIBUYENTE");
		}
		if(utn_getCuil(auxContribuyente.cuil,"\nINGRESE EL CUIL DEL CONTIBUYENTE","\nERROR. INGRESE EL CUIL DEL CONTIBUYENTE",3) != 0)
		{
			printf("\nERROR. NO SE INGRESO EL CUIL DEL CONTRIBUYENTE");
		}

	return auxContribuyente;
}
int eContribuyente_alta (eContribuyente arrayContribuyentes[], int tam, int *pIdContador)
{
	int rtn = -1;
	eContribuyente auxContribuyente;

	int index = eContribuyente_buscarLibre (arrayContribuyentes, tam);

	if (index != -1)
	{
		auxContribuyente = eContribuyente_cargarPantalla();

		auxContribuyente.isEmpty = 0;
		rtn = 0;
	}
	if(rtn == 0)
	{
		(*pIdContador)++;
		auxContribuyente.idContribuyente = *pIdContador;
		arrayContribuyentes[index] = auxContribuyente;
	}


	return rtn;
}
void eContribuyente_mostrarUno (eContribuyente arrayContribuyentes[],int tamanio,eSector arraySector[],int cant)
{
	char detalleSector[20];
	getNombreSector(arraySector,CANT,arrayEmpleados[tamanio].sector,detalleSector);
	utn_getMayusMin (arrayEmpleados[tamanio].name, TEXTO);
	utn_getMayusMin (arrayEmpleados[tamanio].lastName, TEXTO);
	printf("\n %d     %-5s         %-6s           %-6.2f        %-8d      %s"
			,arrayEmpleados[tamanio].id
			,arrayEmpleados[tamanio].name
			,arrayEmpleados[tamanio].lastName
			,arrayEmpleados[tamanio].salary
			,arrayEmpleados[tamanio].sector
			,detalleSector);
}
int mostrarEmpleados (eContribuyente arrayEmpleados[],int tamanio,eSector arraySector[], int cant)
{
	int i;
	int ret;
	ret = -1;
	if(arrayEmpleados != NULL && tamanio > 0)
	{
		printf("\n*****************************************************************************\n");
		printf("\n ID    NOMBRE      APELLIDO         SUELDO        ID SECTOR        DETALLE ");
		printf("\n*****************************************************************************\n");
		for (i = 0; i < tamanio; ++i)
		{

			if(arrayEmpleados[i].isEmpty == 0)
			{
				mostrarEmpleado(arrayEmpleados,i,arraySector,cant);
			}
		}
		ret = 0;
	}
	return ret;
}
eContribuyente modificarUno(eContribuyente arrayEmpleados, int campoModificar)
{
	eContribuyente auxiliar = arrayEmpleados;
			switch (campoModificar)
			{
				case 1:
					if((utn_getString(auxiliar.name,30,"\nIngrese el nombre del empleado: ","\nError. Ingrese el nombre del empleado: ",3,3)) != 0)
					{
						printf("\n Error al ingresar el nombre");
					}
					fflush(stdin);
					break;
				case 2:
					if((utn_getString(auxiliar.lastName,30,"\nIngrese el apellido del empleado: ","\nError. Ingrese el apellido del empleado: ",3,3)) != 0)
					{
						printf("\n Error al ingresar el apellido");
					}
					fflush(stdin);
					break;
				case 3:
					if(utn_getFloat(&auxiliar.salary,"\nIngrese el sueldo del empleado: ","\nError. Ingrese el sueldo del empleado: ",1000,999999,3) != 0)
					{
						printf("\n Error al ingresar el sueldo");
					}
					break;
				case 4:
					if(utn_getNumero(&auxiliar.sector,"\nIngrese el sector (1. RRHH, 2. Programador, 3. Diseniador, 4. Otros):\n","\nError. Ingrese el sector (1. RRHH, 2. Programador, 3. Diseniador, 4. Otros):\n",1,4,3) != 0)
					{
						printf("\n Error al ingresar el sector");
					}
					break;
					default:
						break;
				}

	return auxiliar;
}
int modificarEmpleados (eContribuyente arrayEmpleados[], int tamanio, eSector arraySector[], int cant)
{
		int rtn = -1;
		int idGen;
		int index;
		int flag = 0;
		int auxMod;
		eContribuyente auxiliar;

		if (mostrarEmpleados(arrayEmpleados, tamanio, arraySector, cant) == 0)
		{
			flag = 1;
		}

		if (flag) {
			printf("\n*****************************************************************\n");
			printf("Ingrese el id del empleado a modificar:");
			scanf("%d",&idGen);

			while (buscarId(arrayEmpleados, tamanio, idGen) == -1)
			{
				printf("NO EXISTE ID. Reingrese el id a modificar:");
				scanf("%d",&idGen);
			}


			index = buscarId(arrayEmpleados, tamanio, idGen);
			printf("\n*****************************************************************\n");
			printf("Ingrese el campo a modificar\n1. Nombre \n2. Apellido \n3. Sueldo \n4. Sector");
			printf("\n*****************************************************************\n");
			printf("Ingrese:");
			scanf("%d",&auxMod);
			if(utn_getRespuesta ("\nDesea modificar el empleado? (SI 's' o NO 'n'): ","\nError. Ingrese (SI 's' o NO 'n')", 3)==0)
			{
			auxiliar = modificarUno(arrayEmpleados[index],auxMod);
			arrayEmpleados[index] = auxiliar;
			rtn = 0;
			}

		}

		return rtn;
}
int empleadoBaja (eContribuyente arrayEmpleados[], int tamanio, eSector arraySector[], int cant)
{
	int rtn = -1;
	int idGen;
	int index;
	int flag = 0;

	if (mostrarEmpleados(arrayEmpleados, tamanio, arraySector, cant) == 0)
	{
		flag = 1;
	}

	if (flag) {
		printf("\n*****************************************************************\n");
		printf("\nIngrese el id del empleado a dar de baja:");
		scanf("%d",&idGen);

		while (buscarId(arrayEmpleados, tamanio, idGen) == -1)
		{
			printf("NO EXISTE ID. Reingrese el id a dar de baja:");
			scanf("%d",&idGen);
		}
		index = buscarId(arrayEmpleados, tamanio, idGen);
		if(utn_getRespuesta ("\nDesea dar la baja el empleado? (si 's' o NO 'no'): ","\nError. Ingrese (SI 's' o NO 'n')", 3)==0)
		{
			arrayEmpleados[index].isEmpty = 1;
			rtn = 0;
		}
		else
		{
			rtn = -1;
		}

	}

	return rtn;
}
